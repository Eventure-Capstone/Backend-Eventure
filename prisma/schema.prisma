generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String              @id @default(uuid())
  email               String              @unique
  full_name           String
  password            String
  is_active           Boolean             @default(false)
  profile_picture     String?
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  events              Event[]
  preferences         UserPreference[]
  email_verifications EmailVerification[]
  saved_events        UserSavedEvent[]
}

model Event {
  id             String            @id @default(uuid())
  title          String
  author_id      String
  category       String
  description    String?
  banner         String
  location       String
  date           DateTime
  latitude       Float
  longitude      Float
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  social_links   EventSocialLink[]
  author         User              @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UserSavedEvent UserSavedEvent[]
}

model EventSocialLink {
  id        String  @id @default(uuid())
  event_id  String
  instagram String?
  twitter   String?
  facebook  String?
  website   String?
  event     Event   @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Preference {
  id    String           @id @default(uuid())
  name  String
  users UserPreference[]
}

model UserPreference {
  user_id       String
  preference_id String
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  preference    Preference @relation(fields: [preference_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([user_id, preference_id])
}

model UserSavedEvent {
  user_id  String
  event_id String
  user     User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  event    Event  @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([user_id, event_id])
}

model EmailVerification {
  id         String   @id @default(uuid())
  otp_code   String
  created_at DateTime @default(now())
  expires_at DateTime
  is_used    Boolean  @default(false)
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
